package interfaz;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import ruleta.*;

/**
 *
 * @author Zuly Mejia-160003724
 *         Johan Leon-160003717
 */

public class tablero extends javax.swing.JFrame {

    public tablero() {
        initComponents();
        setTitle("Ruleta");
        this.inicio();
        this.setLocationRelativeTo(null);
        try {
            r.IniciarJugadores();
        } catch (Exception e) {
            System.out.println(e);
        }
        this.Puestos();
        setIconImage(new ImageIcon(getClass().getResource("/img/ruletaIcon.png")).getImage());
    }
    Ruleta r = new Ruleta();

    private Nodosimple cabeza;
    private int tam;

    public boolean esVacia() {
        return cabeza == null;  // if(cabeza == null)
    }

    public Nodosimple getCabeza() {
        return cabeza;
    }

    public void setCabeza(Nodosimple cabeza) {
        this.cabeza = cabeza;
    }

    public int getTam() {
        return tam;
    }

    public void setTam(int tam) {
        this.tam = tam;
    }

    public void inicio() {
        /*NO DEJA SELECCIONAR UNA APUESTA AL PRINCIPIO DEL JUEGO SI NO SE
        HA SELECCIONADO QUE TIPO DE APUESTA VA A HACER*/
        this.apuesta.setEnabled(false);
        this.montofijo.setEnabled(false);
        this.combocolor.setEnabled(false);
        this.combolinea.setEnabled(false);
        this.combodocena.setEnabled(false);
        this.combomitad.setEnabled(false);
        this.comboparimpar.setEnabled(false);

        this.montocolor.setEnabled(false);
        this.montodocena.setEnabled(false);
        this.montofijo.setEnabled(false);
        this.montolinea.setEnabled(false);
        this.montomitad.setEnabled(false);
        this.montoparimpar.setEnabled(false);

        this.apostar.setEnabled(false);
        this.comboJugador.setSelectedIndex(0);
        this.combocolor.setSelectedIndex(0);
        this.combodocena.setSelectedIndex(0);
        this.combolinea.setSelectedIndex(0);
        this.combomitad.setSelectedIndex(0);
        this.comboparimpar.setSelectedIndex(0);

        this.montocolor.setText("");
        this.montodocena.setText("");
        this.montofijo.setText("");
        this.montolinea.setText("");
        this.montomitad.setText("");
        this.montoparimpar.setText("");
        this.apuesta.setText("");
        this.txtDineroJugador.setText("");

        this.check1.setSelected(false);
        this.checkcolor.setSelected(false);
        this.checkdocena.setSelected(false);
        this.checklinea.setSelected(false);
        this.checkmitad.setSelected(false);
        this.checkparimpar.setSelected(false);

        this.check1.setEnabled(false);
        this.checkcolor.setEnabled(false);
        this.checkdocena.setEnabled(false);
        this.checklinea.setEnabled(false);
        this.checkmitad.setEnabled(false);
        this.checkparimpar.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tablero = new javax.swing.JLabel();
        primero = new javax.swing.JLabel();
        segundo = new javax.swing.JLabel();
        tercero = new javax.swing.JLabel();
        cuarto = new javax.swing.JLabel();
        b1 = new javax.swing.JLabel();
        b2 = new javax.swing.JLabel();
        b3 = new javax.swing.JLabel();
        b4 = new javax.swing.JLabel();
        apostar = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        jugador = new javax.swing.JLabel();
        apuestan = new javax.swing.JLabel();
        apuesta = new javax.swing.JTextField();
        mapuesta = new javax.swing.JLabel();
        montofijo = new javax.swing.JTextField();
        linea = new javax.swing.JLabel();
        mitad = new javax.swing.JLabel();
        color = new javax.swing.JLabel();
        cuadro = new javax.swing.JLabel();
        checklinea = new javax.swing.JCheckBox();
        checkmitad = new javax.swing.JCheckBox();
        checkcolor = new javax.swing.JCheckBox();
        checkparimpar = new javax.swing.JCheckBox();
        comboJugador = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        check1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        combolinea = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        combomitad = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        combocolor = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        comboparimpar = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        montolinea = new javax.swing.JTextField();
        montomitad = new javax.swing.JTextField();
        montocolor = new javax.swing.JTextField();
        montoparimpar = new javax.swing.JTextField();
        linea2 = new javax.swing.JLabel();
        checkdocena = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        combodocena = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        montodocena = new javax.swing.JTextField();
        btnGirar = new javax.swing.JButton();
        jugador1 = new javax.swing.JLabel();
        PanelCircular = new interfaz.PaneRuleta();
        txtDineroJugador = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 0));
        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/11.png"))); // NOI18N
        jPanel1.add(tablero, new org.netbeans.lib.awtextra.AbsoluteConstraints(469, 32, 809, -1));

        primero.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        primero.setForeground(new java.awt.Color(0, 0, 0));
        primero.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        primero.setAlignmentY(0.0F);
        jPanel1.add(primero, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 498, 100, 30));

        segundo.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        segundo.setForeground(new java.awt.Color(0, 255, 255));
        segundo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(segundo, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 498, 100, 30));

        tercero.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        tercero.setForeground(new java.awt.Color(255, 0, 0));
        tercero.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tercero.setAlignmentY(0.0F);
        jPanel1.add(tercero, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 498, 100, 30));

        cuarto.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        cuarto.setForeground(new java.awt.Color(255, 255, 0));
        cuarto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(cuarto, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 498, 100, 30));

        b1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/f1.png"))); // NOI18N
        b1.setText("jLabel1");
        jPanel1.add(b1, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 465, 102, -1));

        b2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/f2.png"))); // NOI18N
        b2.setText("jLabel3");
        jPanel1.add(b2, new org.netbeans.lib.awtextra.AbsoluteConstraints(141, 465, 100, -1));

        b3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/f3.png"))); // NOI18N
        b3.setText("jLabel5");
        jPanel1.add(b3, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 465, 100, -1));

        b4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/f4.png"))); // NOI18N
        b4.setText("jLabel1");
        jPanel1.add(b4, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 465, 100, -1));

        apostar.setBackground(new java.awt.Color(0, 0, 0));
        apostar.setFont(new java.awt.Font("Digital-7", 1, 20)); // NOI18N
        apostar.setForeground(new java.awt.Color(255, 255, 51));
        apostar.setText("Guardar Apuesta");
        apostar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        apostar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apostarActionPerformed(evt);
            }
        });
        jPanel1.add(apostar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 360, 180, 45));

        salir.setBackground(new java.awt.Color(0, 0, 0));
        salir.setFont(new java.awt.Font("Digital-7", 1, 36)); // NOI18N
        salir.setForeground(new java.awt.Color(204, 255, 0));
        salir.setText("Salir ");
        salir.setAlignmentY(0.0F);
        salir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        salir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        salir.setPreferredSize(new java.awt.Dimension(102, 24));
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        jPanel1.add(salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 588, 130, 60));

        jugador.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jugador.setForeground(new java.awt.Color(255, 255, 255));
        jugador.setText("Dinero: ");
        jPanel1.add(jugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 344, -1, 20));

        apuestan.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        apuestan.setForeground(new java.awt.Color(255, 255, 255));
        apuestan.setText("Numero apuesta:");
        jPanel1.add(apuestan, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 420, -1, -1));

        apuesta.setBackground(new java.awt.Color(0, 0, 0));
        apuesta.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        apuesta.setForeground(new java.awt.Color(255, 255, 255));
        apuesta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        apuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apuestaActionPerformed(evt);
            }
        });
        apuesta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                apuestaKeyTyped(evt);
            }
        });
        jPanel1.add(apuesta, new org.netbeans.lib.awtextra.AbsoluteConstraints(827, 420, 80, -1));

        mapuesta.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        mapuesta.setForeground(new java.awt.Color(255, 255, 255));
        mapuesta.setText("Monto puesta: ");
        jPanel1.add(mapuesta, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 420, -1, -1));

        montofijo.setBackground(new java.awt.Color(0, 0, 0));
        montofijo.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        montofijo.setForeground(new java.awt.Color(255, 255, 255));
        montofijo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        montofijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montofijoActionPerformed(evt);
            }
        });
        montofijo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                montofijoKeyTyped(evt);
            }
        });
        jPanel1.add(montofijo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 420, 130, -1));

        linea.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        linea.setForeground(new java.awt.Color(255, 255, 255));
        linea.setText("Linea:");
        jPanel1.add(linea, new org.netbeans.lib.awtextra.AbsoluteConstraints(496, 510, -1, -1));

        mitad.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        mitad.setForeground(new java.awt.Color(255, 255, 255));
        mitad.setText("Mitad: ");
        jPanel1.add(mitad, new org.netbeans.lib.awtextra.AbsoluteConstraints(496, 552, -1, -1));

        color.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        color.setForeground(new java.awt.Color(255, 255, 255));
        color.setText("Color:");
        jPanel1.add(color, new org.netbeans.lib.awtextra.AbsoluteConstraints(496, 594, -1, -1));

        cuadro.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        cuadro.setForeground(new java.awt.Color(255, 255, 255));
        cuadro.setText("Par/Impar");
        jPanel1.add(cuadro, new org.netbeans.lib.awtextra.AbsoluteConstraints(496, 632, -1, -1));

        checklinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checklineaActionPerformed(evt);
            }
        });
        jPanel1.add(checklinea, new org.netbeans.lib.awtextra.AbsoluteConstraints(623, 516, -1, -1));

        checkmitad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkmitadActionPerformed(evt);
            }
        });
        jPanel1.add(checkmitad, new org.netbeans.lib.awtextra.AbsoluteConstraints(623, 558, -1, -1));

        checkcolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkcolorActionPerformed(evt);
            }
        });
        jPanel1.add(checkcolor, new org.netbeans.lib.awtextra.AbsoluteConstraints(623, 598, -1, -1));

        checkparimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkparimparActionPerformed(evt);
            }
        });
        jPanel1.add(checkparimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(623, 634, -1, -1));

        comboJugador.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        comboJugador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        try{
            model();

        }catch(Exception e){
            System.out.println(e);
        }
        comboJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboJugadorActionPerformed(evt);
            }
        });
        jPanel1.add(comboJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 340, 180, -1));

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Apuesta solo un numero: ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 380, -1, -1));

        check1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check1ActionPerformed(evt);
            }
        });
        jPanel1.add(check1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 380, -1, -1));

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Linea apuesta: ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 510, -1, -1));

        combolinea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", " C ", " B ", " A " }));
        combolinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combolineaActionPerformed(evt);
            }
        });
        jPanel1.add(combolinea, new org.netbeans.lib.awtextra.AbsoluteConstraints(818, 511, 94, -1));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Mitad apuesta:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 558, -1, -1));

        combomitad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "1-18", "19-36" }));
        combomitad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combomitadActionPerformed(evt);
            }
        });
        jPanel1.add(combomitad, new org.netbeans.lib.awtextra.AbsoluteConstraints(818, 558, 94, -1));

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Color apuesta:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 597, -1, -1));

        combocolor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Negro", "Rojo" }));
        combocolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combocolorActionPerformed(evt);
            }
        });
        jPanel1.add(combocolor, new org.netbeans.lib.awtextra.AbsoluteConstraints(818, 598, 94, -1));

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Cuadro apuesta:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 634, 152, -1));

        comboparimpar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Par", "Impar" }));
        comboparimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboparimparActionPerformed(evt);
            }
        });
        jPanel1.add(comboparimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(817, 635, 93, -1));

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Monto apuesta:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(929, 558, -1, -1));

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Monto apuesta:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(929, 598, -1, -1));

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Monto apuesta:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(929, 510, -1, -1));

        jLabel12.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Monto apuesta:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(928, 640, -1, -1));

        montolinea.setBackground(new java.awt.Color(0, 0, 0));
        montolinea.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        montolinea.setForeground(new java.awt.Color(255, 255, 255));
        montolinea.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        montolinea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                montolineaKeyTyped(evt);
            }
        });
        jPanel1.add(montolinea, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 510, 130, -1));

        montomitad.setBackground(new java.awt.Color(0, 0, 0));
        montomitad.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        montomitad.setForeground(new java.awt.Color(255, 255, 255));
        montomitad.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        montomitad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                montomitadKeyTyped(evt);
            }
        });
        jPanel1.add(montomitad, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 560, 130, -1));

        montocolor.setBackground(new java.awt.Color(0, 0, 0));
        montocolor.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        montocolor.setForeground(new java.awt.Color(255, 255, 255));
        montocolor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        montocolor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                montocolorKeyTyped(evt);
            }
        });
        jPanel1.add(montocolor, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 600, 130, -1));

        montoparimpar.setBackground(new java.awt.Color(0, 0, 0));
        montoparimpar.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        montoparimpar.setForeground(new java.awt.Color(255, 255, 255));
        montoparimpar.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        montoparimpar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                montoparimparKeyTyped(evt);
            }
        });
        jPanel1.add(montoparimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 640, 130, -1));

        linea2.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        linea2.setForeground(new java.awt.Color(255, 255, 255));
        linea2.setText("Docena:");
        jPanel1.add(linea2, new org.netbeans.lib.awtextra.AbsoluteConstraints(496, 468, -1, -1));

        checkdocena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkdocenaActionPerformed(evt);
            }
        });
        jPanel1.add(checkdocena, new org.netbeans.lib.awtextra.AbsoluteConstraints(623, 474, -1, -1));

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Docena apuesta: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 465, -1, -1));

        combodocena.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "1 a 12", "13 a 24", "25 a 36" }));
        combodocena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combodocenaActionPerformed(evt);
            }
        });
        jPanel1.add(combodocena, new org.netbeans.lib.awtextra.AbsoluteConstraints(818, 466, 94, -1));

        jLabel13.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Monto apuesta:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 464, -1, -1));

        montodocena.setBackground(new java.awt.Color(0, 0, 0));
        montodocena.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        montodocena.setForeground(new java.awt.Color(255, 255, 255));
        montodocena.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        montodocena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montodocenaActionPerformed(evt);
            }
        });
        montodocena.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                montodocenaKeyTyped(evt);
            }
        });
        jPanel1.add(montodocena, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 470, 130, -1));

        btnGirar.setBackground(new java.awt.Color(0, 0, 0));
        btnGirar.setFont(new java.awt.Font("Digital-7", 1, 36)); // NOI18N
        btnGirar.setForeground(new java.awt.Color(255, 0, 0));
        btnGirar.setText("Girar");
        btnGirar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGirar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGirarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGirar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 590, 160, 60));

        jugador1.setFont(new java.awt.Font("Trebuchet MS", 0, 20)); // NOI18N
        jugador1.setForeground(new java.awt.Color(255, 255, 255));
        jugador1.setText("Jugador: ");
        jPanel1.add(jugador1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 340, -1, -1));

        PanelCircular.setAlignmentX(0.0F);
        PanelCircular.setAlignmentY(0.0F);
        PanelCircular.setMaximumSize(new java.awt.Dimension(450, 430));
        PanelCircular.setOpaque(false);

        javax.swing.GroupLayout PanelCircularLayout = new javax.swing.GroupLayout(PanelCircular);
        PanelCircular.setLayout(PanelCircularLayout);
        PanelCircularLayout.setHorizontalGroup(
            PanelCircularLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        PanelCircularLayout.setVerticalGroup(
            PanelCircularLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        jPanel1.add(PanelCircular, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 450, 430));

        txtDineroJugador.setBackground(new java.awt.Color(0, 0, 0));
        txtDineroJugador.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtDineroJugador.setForeground(new java.awt.Color(255, 255, 255));
        txtDineroJugador.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDineroJugador.setEnabled(false);
        txtDineroJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDineroJugadorActionPerformed(evt);
            }
        });
        jPanel1.add(txtDineroJugador, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 341, 150, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combolineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combolineaActionPerformed
        if (this.combolinea.getSelectedIndex() == 0) {
            this.apostar.setEnabled(false);
        } else {
            this.apostar.setEnabled(true);
        }
    }//GEN-LAST:event_combolineaActionPerformed

    private void check1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check1ActionPerformed
        if (this.check1.isSelected()) {
            this.apuesta.setEnabled(true);
            this.apostar.setEnabled(true);
            this.montofijo.setEnabled(true);
        } else {
            this.apostar.setEnabled(false);
            this.apuesta.setEnabled(false);
            this.apuesta.setText("");
            this.montofijo.setEnabled(false);
            this.montofijo.setText("");
        }
    }//GEN-LAST:event_check1ActionPerformed

    private void checklineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checklineaActionPerformed
        if (this.checklinea.isSelected()) {
            this.apostar.setEnabled(true);
            this.combolinea.setEnabled(true);
            this.montolinea.setEnabled(true);
        } else {
            this.apostar.setEnabled(false);
            this.combolinea.setEnabled(false);
            this.combolinea.setSelectedIndex(0);
            this.montolinea.setText("");
            this.montolinea.setEnabled(false);
        }
    }//GEN-LAST:event_checklineaActionPerformed

    private void montofijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montofijoActionPerformed

    }//GEN-LAST:event_montofijoActionPerformed

    private void apuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apuestaActionPerformed

    }//GEN-LAST:event_apuestaActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        inicio i = new inicio();
        i.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_salirActionPerformed

    private void checkdocenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkdocenaActionPerformed
        if (this.checkdocena.isSelected()) {
            this.apostar.setEnabled(true);
            this.combodocena.setEnabled(true);
            this.montodocena.setEnabled(true);
        } else {
            this.apostar.setEnabled(false);
            this.combodocena.setEnabled(false);
            this.combodocena.setSelectedIndex(0);
            this.montodocena.setText("");
            this.montodocena.setEnabled(false);
        }
    }//GEN-LAST:event_checkdocenaActionPerformed

    private void combodocenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combodocenaActionPerformed
        if (this.combodocena.getSelectedIndex() == 0) {
            this.apostar.setEnabled(false);

        } else {
            this.apostar.setEnabled(true);
        }
    }//GEN-LAST:event_combodocenaActionPerformed
    boolean Detener;
    int GradosPelota;
    static Random ra = new Random();
    private void btnGirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGirarActionPerformed

        PanelCircular.flag = false;
        PanelCircular.repaint();
        deshabilitar();//NO DEJA HACER NADA MIENTRAS LA RULETA ESTA EN MOVIMIENTO
        new Thread(new Runnable() {
            @Override
            public void run() {
                int rojo[] = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36};
                boolean flag = false;
                Detener = false;
                GradosPelota = 0;
                int pausa = 0;
                int acu = 0, limite = limite(), GradosRuleta = 0;
                while (Detener != true) {
                    try {
                        PanelCircular.setGrados(GradosRuleta);
                        PanelCircular.SubirProgreso(GradosPelota);
                        PanelCircular.repaint();

                        Thread.sleep(pausa);
                        if (GradosPelota == 100) {
                            GradosPelota = 0;
                            pausa += 5;
                        } else {
                            GradosPelota++;
                        }
                        if (GradosRuleta >= 1437) {
                            GradosRuleta = 1437;
                        }

                        acu++;
                        GradosRuleta = GradosRuleta + 3;

                        if (acu == limite) {
                            Detener = true;

                            habilitar();//VUELVE A HABILITAR LOS BOTONES, COMBOBOX Y CHECKBOX

                        }
                    } catch (InterruptedException ex) {
                        java.util.logging.Logger.getLogger(tablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                String ganador = mostrar(GradosPelota);
                r.setNumerowin(Integer.parseInt(ganador));

                for (int i = 0; i < rojo.length; i++) {
                    if (rojo[i] == Integer.parseInt(ganador)) {
                        flag = true;
                    }
                }
                if (flag == true) {
                    PanelCircular.color = "rojo";
                } else {
                    PanelCircular.color = "negro";
                }

                PanelCircular.flag = true;
                PanelCircular.numero = ganador;
                PanelCircular.repaint();

                try {

                    inicializarElPago();
                } catch (IOException ex) {
                    Logger.getLogger(tablero.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
    }//GEN-LAST:event_btnGirarActionPerformed

    private void apostarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apostarActionPerformed

        int id = this.comboJugador.getSelectedIndex();
        String nombre = this.comboJugador.getItemAt(id);

        boolean pdocena = false;
        boolean sdocena = false;// SEGUNDA DOCENA///
        boolean tdocena = false;/// TERCERA DOCENA//
        boolean pfila = false;/// PRIMERA FILA//
        boolean sfila = false;///SEGUNDA FILA//
        boolean tfila = false;/// TERCERA FILA///
        boolean impar = false;/// PRIMO O PAR///
        boolean par = false;
        boolean rojo = false;/// COLOR///
        boolean negro = false;
        boolean numfijo = false;/// NUMERO FIJO//
        boolean pmitad = false;
        boolean smitad = false;

        int pdocenadinero = 0;// PRIMERA DOCENA///
        int sdocenadinero = 0;// SEGUNDA DOCENA///
        int tdocenadinero = 0;/// TERCERA DOCENA//
        int pfiladinero = 0;/// PRIMERA FILA//
        int sfiladinero = 0;///SEGUNDA FILA//
        int tfiladinero = 0;/// TERCERA FILA///
        int pardinero = 0;
        int impardinero = 0;
        int rojodinero = 0;/// COLOR///
        int negrodinero = 0;
        int numfijodinero = 0;/// NUMERO FIJO//
        int pmitaddinero = 0;
        int smitaddinero = 0;

        if (this.combodocena.getSelectedIndex() == 1) {
            pdocena = true;
            if (this.montodocena.getText().equals("")) {

                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                pdocena = false;
                pdocenadinero = 0;
            } else {
                pdocenadinero = Integer.parseInt(this.montodocena.getText());
                if (!r.validarDinero(id, nombre, pdocenadinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \nno se pudo realizar ya que no posee tanto dinero ");
                    pdocena = false;
                    pdocenadinero = 0;
                }

            }
        }

        if (this.combodocena.getSelectedIndex() == 2) {
            sdocena = true;

            if (this.montodocena.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                sdocena = false;
                sdocenadinero = 0;
            } else {

                sdocenadinero = Integer.parseInt(this.montodocena.getText());
                if (!r.validarDinero(id, nombre, sdocenadinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \nno se pudo realizar ya que no posee tanto dinero ");
                    sdocena = false;
                    sdocenadinero = 0;
                }

            }
        }
        if (this.combodocena.getSelectedIndex() == 3) {
            tdocena = true;

            if (this.montodocena.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                tdocena = false;
                tdocenadinero = 0;
            } else {

                tdocenadinero = Integer.parseInt(this.montodocena.getText());
                if (!r.validarDinero(id, nombre, tdocenadinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \nno se pudo realizar ya que no posee tanto dinero ");
                    tdocena = false;
                    tdocenadinero = 0;
                }

            }
        }

        if (this.combolinea.getSelectedIndex() == 1) {
            pfila = true;
            if (this.montolinea.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                pfila = false;
                pfiladinero = 0;
            } else {
                pfiladinero = Integer.parseInt(this.montolinea.getText());

                if (!r.validarDinero(id, nombre, pfiladinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \nno se pudo realizar ya que no posee tanto dinero ");
                    pfila = false;
                    pfiladinero = 0;
                }

            }
        }
        if (this.combolinea.getSelectedIndex() == 2) {
            sfila = true;
            if (this.montolinea.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                sfila = false;
                sfiladinero = 0;
            } else {
                sfiladinero = Integer.parseInt(this.montolinea.getText());
                if (!r.validarDinero(id, nombre, sfiladinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    sfila = false;
                    sfiladinero = 0;
                }

            }
        }

        if (this.combolinea.getSelectedIndex() == 3) {

            tfila = true;
            if (this.montolinea.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                tfila = false;
                tfiladinero = 0;
            } else {
                tfiladinero = Integer.parseInt(this.montolinea.getText());
                if (!r.validarDinero(id, nombre, tfiladinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    tfila = false;
                    tfiladinero = 0;
                }

            }
        }

        if (this.combomitad.getSelectedIndex() == 1) {
            pmitad = true;
            if (this.montomitad.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                pmitad = false;
                pmitaddinero = 0;
            } else {
                pmitaddinero = Integer.parseInt(this.montomitad.getText());
                if (!r.validarDinero(id, nombre, pmitaddinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    pmitad = false;
                    pmitaddinero = 0;
                }

            }
        }
        if (this.combomitad.getSelectedIndex() == 2) {
            smitad = true;
            if (this.montomitad.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                smitad = false;
                smitaddinero = 0;
            } else {
                smitaddinero = Integer.parseInt(this.montomitad.getText());
                if (!r.validarDinero(id, nombre, smitaddinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    smitad = false;
                    smitaddinero = 0;
                }

            }
        }
        if (this.combocolor.getSelectedIndex() == 1) {
            rojo = true;
            if (this.montocolor.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                rojo = false;
                rojodinero = 0;
            } else {
                rojodinero = Integer.parseInt(this.montocolor.getText());
                if (!r.validarDinero(id, nombre, rojodinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    rojo = false;
                    rojodinero = 0;
                }

            }
        }
        if (this.combocolor.getSelectedIndex() == 2) {
            negro = true;
            if (this.montocolor.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                negro = false;
                negrodinero = 0;
            } else {
                negrodinero = Integer.parseInt(this.montocolor.getText());
                if (!r.validarDinero(id, nombre, negrodinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    negro = false;
                    negrodinero = 0;
                }

            }
        }
        if (this.comboparimpar.getSelectedIndex() == 1) {
            par = true;
            if (this.montoparimpar.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                par = false;
                pardinero = 0;
            } else {
                pardinero = Integer.parseInt(this.montoparimpar.getText());
                if (!r.validarDinero(id, nombre, pardinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    par = false;
                    pardinero = 0;
                }

            }
        }

        if (this.comboparimpar.getSelectedIndex() == 2) {
            impar = true;
            if (this.montoparimpar.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta");
                impar = false;
                impardinero = 0;
            } else {
                impardinero = Integer.parseInt(this.montoparimpar.getText());
                if (!r.validarDinero(id, nombre, impardinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    impar = false;
                    impardinero = 0;
                }

            }
        }

     
        if (this.check1.isSelected()) {
            numfijo = true;
            if (this.montofijo.getText().equals("") || this.apuesta.getText().equals("") || Integer.parseInt(apuesta.getText()) > 36) {
                if (Integer.parseInt(apuesta.getText()) > 36) {
                    JOptionPane.showMessageDialog(rootPane, "Por favor introduzca un numero del 0 al 36");
                    numfijo = false;
                } else {
                    JOptionPane.showMessageDialog(null, "No se ingresó el valor de la apuesta"
                            + "\n                         Ó"
                            + "\nNo se ingreso el número a apostar");
                    numfijo = false;
                    numfijodinero = 0;
                }
            } else {
                numfijodinero = Integer.parseInt(this.montofijo.getText());
                if (!r.validarDinero(id, nombre, numfijodinero)) {
                    JOptionPane.showMessageDialog(null, "La apuesta del usuario "
                            + "" + nombre + " \n no se pudo realizar ya que no posee tanto dinero ");
                    numfijo = false;
                    numfijodinero = 0;
                }
                r.setApuestaFija(id, numfijo, Integer.parseInt(this.apuesta.getText()), numfijodinero);

            }
        }

        r.setApuesta(id, pdocena, pdocenadinero, sdocena, sdocenadinero, tdocena,
                tdocenadinero, pfila, pfiladinero, sfila,
                sfiladinero, tfila, tfiladinero, impar,
                impardinero, par, pardinero, rojo, rojodinero,
                negro, negrodinero, pmitad, pmitaddinero, smitad, smitaddinero);

        this.inicio();

    }//GEN-LAST:event_apostarActionPerformed

    private void checkmitadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkmitadActionPerformed
        if (this.checkmitad.isSelected()) {
            this.apostar.setEnabled(true);
            this.combomitad.setEnabled(true);
            this.montomitad.setEnabled(true);
        } else {
            this.apostar.setEnabled(false);
            this.combomitad.setEnabled(false);
            this.combomitad.setSelectedIndex(0);
            this.montomitad.setText("");
            this.montomitad.setEnabled(false);
        }
    }//GEN-LAST:event_checkmitadActionPerformed

    private void comboJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboJugadorActionPerformed
        if (this.comboJugador.getSelectedIndex() == 0) {
            this.inicio();
        } else {
            this.check1.setEnabled(true);
            this.checkcolor.setEnabled(true);
            this.checkdocena.setEnabled(true);
            this.checklinea.setEnabled(true);
            this.checkmitad.setEnabled(true);
            this.checkparimpar.setEnabled(true);
            dineroActual(this.comboJugador.getSelectedIndex());
        }
    }//GEN-LAST:event_comboJugadorActionPerformed

    private void checkcolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkcolorActionPerformed
        if (this.checkcolor.isSelected()) {
            this.apostar.setEnabled(true);
            this.combocolor.setEnabled(true);
            this.montocolor.setEnabled(true);
        } else {
            this.apostar.setEnabled(false);
            this.combocolor.setEnabled(false);
            this.combocolor.setSelectedIndex(0);
            this.montocolor.setText("");
            this.montocolor.setEnabled(false);
        }
    }//GEN-LAST:event_checkcolorActionPerformed

    private void checkparimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkparimparActionPerformed
        if (this.checkparimpar.isSelected()) {
            this.apostar.setEnabled(true);
            this.comboparimpar.setEnabled(true);
            this.montoparimpar.setEnabled(true);
        } else {
            this.apostar.setEnabled(false);
            this.comboparimpar.setEnabled(false);
            this.comboparimpar.setSelectedIndex(0);
            this.montoparimpar.setText("");
            this.montoparimpar.setEnabled(false);
        }
    }//GEN-LAST:event_checkparimparActionPerformed

    private void montodocenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montodocenaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_montodocenaActionPerformed

    private void combomitadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combomitadActionPerformed
        if (this.combomitad.getSelectedIndex() == 0) {
            this.apostar.setEnabled(false);
        } else {
            this.apostar.setEnabled(true);
        }
    }//GEN-LAST:event_combomitadActionPerformed

    private void combocolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combocolorActionPerformed
        if (this.combocolor.getSelectedIndex() == 0) {
            this.apostar.setEnabled(false);
        } else {
            this.apostar.setEnabled(true);
        }
    }//GEN-LAST:event_combocolorActionPerformed

    private void comboparimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboparimparActionPerformed
        if (this.comboparimpar.getSelectedIndex() == 0) {
            this.apostar.setEnabled(false);
        } else {
            this.apostar.setEnabled(true);
        }
    }//GEN-LAST:event_comboparimparActionPerformed

    private void txtDineroJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDineroJugadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDineroJugadorActionPerformed

    private void montodocenaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_montodocenaKeyTyped
        //condicion para que ingresen solo numeros 
        int num = 9;
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montodocena.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montodocena.setCursor(null);
        }
        if (montodocena.getText().length() >= num) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Por favor introduzca un monto menor a 9 cifras");
        }
    }//GEN-LAST:event_montodocenaKeyTyped

    private void montolineaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_montolineaKeyTyped
        //condicion para que ingresen solo numeros 
        int num = 9;
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montolinea.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montolinea.setCursor(null);
        }
        if (montolinea.getText().length() >= num) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Por favor introduzca  un monto menor a 9 cifras");
        }
    }//GEN-LAST:event_montolineaKeyTyped

    private void montomitadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_montomitadKeyTyped
        //condicion para que ingresen solo numeros 
        int num = 9;
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montomitad.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montomitad.setCursor(null);
        }
        if (montomitad.getText().length() >= num) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Por favor introduzca  un monto menor a 9 cifras");
        }
    }//GEN-LAST:event_montomitadKeyTyped

    private void montocolorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_montocolorKeyTyped
        //condicion para que ingresen solo numeros 
        int num = 9;
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montocolor.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montocolor.setCursor(null);
        }
        if (montocolor.getText().length() >= num) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Por favor introduzca  un monto menor a 9 cifras");
        }
    }//GEN-LAST:event_montocolorKeyTyped

    private void montoparimparKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_montoparimparKeyTyped
        //condicion para que ingresen solo numeros 
        int num = 9;
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montoparimpar.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montoparimpar.setCursor(null);
        }
        if (montoparimpar.getText().length() >= num) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Por favor introduzca  un monto menor a 9 cifras");
        }
    }//GEN-LAST:event_montoparimparKeyTyped

    private void montofijoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_montofijoKeyTyped
        //condicion para que ingresen solo numeros 
        int num = 9;
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montofijo.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            montofijo.setCursor(null);
        }
        if (montofijo.getText().length() >= num) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Por favor introduzca un monto menor a 9 cifras");
        }
    }//GEN-LAST:event_montofijoKeyTyped

    private void apuestaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apuestaKeyTyped
        //condicion para que ingresen solo numeros 
        int num = 2;
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            apuesta.setCursor(null);
        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(this, "Por favor solo ingrese numeros");
            apuesta.setCursor(null);
        }
        if (apuesta.getText().length() >= num) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Por favor introduzca un numero menor a 3 cifras");
        }

    }//GEN-LAST:event_apuestaKeyTyped

    public String mostrar(int pos) {
        ListaCircularSimple lista = new ListaCircularSimple();
        lista.IniciarPersonajes();
        Nodo aux = lista.getCabeza();
        double f = (100 / lista.getTam()) + 0.702702703;

        String Elegido = "";
        for (double j = 0; j <= 100; j = j + f) {
            if (pos >= j && pos <= (f + j)) {
                Elegido = aux.getNumeros();
                break;
            }

            aux = aux.getSgte();
        }
        return Elegido;
    }

    public int limite() {
        int limite = 0;
        while (limite < 708) {
            limite = ra.nextInt(800);

        }

        return limite;
    }

    public void model() {
        boolean flag = true;
        int id = 1;//SE FIJA EL ID DESDE EL CUAL COMENZARA EL RECORRIDO
        int tamaño = 0;
        String TraerNombres = "";
        while (flag == true) {
            try {
                //SE ESTABLECE UNA RUTA DINAMICA 
                File ruta = new File("src\\ArchivosClientes\\" + id + ".txt");

                if (ruta.exists()) {
                    FileReader fr = new FileReader(ruta.getAbsolutePath());
                    BufferedReader bf = new BufferedReader(fr);
                    String texto;

                    while ((texto = bf.readLine()) != null) {

                        String Separar[] = texto.split("_"); //SEPARA AL NOMBRE Y AL DINERO EN UN ARREGLO
                        TraerNombres = TraerNombres.concat(Separar[0]).concat("_"); //CONCATENA LOS NOMBRES QUE ENCUENTRA

                        tamaño++;//SE AUMENTA EL TAMAÑO PARA EL ARREGLO QUE SE CREARA DESPUES
                    }
                    fr.close();
                    bf.close();
                    id++;
                } else {
                    flag = false;
                }

            } catch (Exception e) {
                System.out.println(e);
            }
            /////////////////////////////////CREA EL MODELO SEGUN EL NUMERO DE CLIENTES//////////   
            String Separar[] = TraerNombres.split("_");//SEPARA EN UN ARREGLO LOS NOMBRES QUE SE HABIAN CONCATENADO

            try {
                String combo[] = new String[tamaño + 1];//SE CREA EL ARREGLO DE NOMBRES EN LA VARIABLE COMBO
                combo[0] = "..."; //SE FIJA EL PRIMER VALOR DEL ARREGLO 

                for (int i = 1; i < combo.length; i++) {
                    combo[i] = Separar[i - 1];  //SE LLENA EL COMBO CON LOS NOMBRES QUE CONTIENE LA VARIABLE SEPARAR
                }
                //SETEA EL NUEVO COMBO CON LOS NOMBRES DE LOS JUGADORES EXISTENTES, REEMPLAZANDO EL COMBO POR DEFECTO
                this.comboJugador.setModel(new javax.swing.DefaultComboBoxModel<>(combo));
            } catch (Exception e) {
                System.out.println(e);
            }

        }
    }

    public void inicializarElPago() throws IOException {
        r.pagar();
        System.out.println("\n");
        r.ReiniciarApuestas();
    }

    public void deshabilitar() {
        //////NO DEJA OPRIMIR NADA QUE NO SE DEBA AL JUGADOR MIENTRAS LA RULETA ESTA EN MOVIMIENTO/////
        btnGirar.setEnabled(false);
        salir.setEnabled(false);
        comboJugador.setEnabled(false);
        check1.setEnabled(false);
        checkdocena.setEnabled(false);
        checkcolor.setEnabled(false);
        checklinea.setEnabled(false);
        checkmitad.setEnabled(false);
        checkparimpar.setEnabled(false);

        this.apuesta.setEnabled(false);
        this.montofijo.setEnabled(false);
        this.combocolor.setEnabled(false);
        this.combolinea.setEnabled(false);
        this.combodocena.setEnabled(false);
        this.combomitad.setEnabled(false);
        this.comboparimpar.setEnabled(false);

        this.montocolor.setEnabled(false);
        this.montodocena.setEnabled(false);
        this.montofijo.setEnabled(false);
        this.montolinea.setEnabled(false);
        this.montomitad.setEnabled(false);
        this.montoparimpar.setEnabled(false);

        this.apostar.setEnabled(false);
        this.comboJugador.setSelectedIndex(0);
        this.combocolor.setSelectedIndex(0);
        this.combodocena.setSelectedIndex(0);
        this.combolinea.setSelectedIndex(0);
        this.combomitad.setSelectedIndex(0);
        this.comboparimpar.setSelectedIndex(0);

        this.montocolor.setText("");
        this.montodocena.setText("");
        this.montofijo.setText("");
        this.montolinea.setText("");
        this.montomitad.setText("");
        this.montoparimpar.setText("");
        this.apuesta.setText("");

        this.check1.setSelected(false);
        this.checkcolor.setSelected(false);
        this.checkdocena.setSelected(false);
        this.checklinea.setSelected(false);
        this.checkmitad.setSelected(false);
        this.checkparimpar.setSelected(false);

    }

    public void habilitar() {
        btnGirar.setEnabled(true);
        salir.setEnabled(true);
        comboJugador.setEnabled(true);
        check1.setEnabled(true);
        checkdocena.setEnabled(true);
        checkcolor.setEnabled(true);
        checklinea.setEnabled(true);
        checkmitad.setEnabled(true);
        checkparimpar.setEnabled(true);
    }

    public void dineroActual(int id) {
        //SE ESTABLECE LA RUTA SEGUN EL ID DEL JUGADOR SELECCIONADO EN EL COMBOBOX
        File ruta = new File("src\\ArchivosClientes\\" + id + ".txt");
        File file = new File(ruta.getAbsolutePath());
        int dineroActual = 0;
        try {
            /////////////////////////////TRAE EL DINERO ACTUAL DEL JUGADOR///////////////////
            if (file.exists()) {
                FileReader fr = new FileReader(file);
                BufferedReader bf = new BufferedReader(fr);
                String texto;
                while ((texto = bf.readLine()) != null) {

                    String Separar[] = texto.split("_");//SE SEPARA EL NOMBRE Y EL DINERO EN UN ARREGLO
                    dineroActual = Integer.parseInt(Separar[1]);// SE GUARDA EN LA VARIABLE EL DINERO QUE EL JUGADOR POSEE

                }
                bf.close();
                fr.close();

            }

        } catch (Exception e) {
            System.out.println(e);
        }

        this.txtDineroJugador.setText(String.valueOf(dineroActual));//SE SETEA EL TXTFIELD CON EL DINERO ACTUAL
    }

    public void Puestos() {

        boolean flag = true;
        int id = 1;//SE FIJA EL ID DESDE EL CUAL COMENZARA EL RECORRIDO

        String TraerNombres = "";
        while (flag == true) {
            try {
                //SE ESTABLECE UNA RUTA DINAMICA 
                File ruta = new File("src\\ArchivosClientes\\" + id + ".txt");

                if (ruta.exists()) {
                    FileReader fr = new FileReader(ruta.getAbsolutePath());
                    BufferedReader bf = new BufferedReader(fr);
                    String texto;

                    while ((texto = bf.readLine()) != null) {

                        String Separar[] = texto.split("_"); //SEPARA AL NOMBRE Y AL DINERO EN UN ARREGLO

                        TraerNombres = TraerNombres.concat(Separar[0]).concat("_"); //CONCATENA LOS NOMBRES QUE ENCUENTRA
                        this.agregarAlFinal(id, Separar[0], Integer.parseInt(Separar[1]));//SE CREA UNA LISTA SIMPLE 
                        //PARA POSTERIORMENTE ASIGNAR LOS 4 PRIMEROS PUESTOS
                    }
                    fr.close();
                    bf.close();
                    id++;
                } else {
                    flag = false;
                }

            } catch (Exception e) {
                System.out.println(e);
            }

        }

        this.Organizar();
        this.setGanadores();

    }

    public void Organizar() {
        //////////ORGANIZA A LOS JUGADORES DE MAYOR A MENOR DINERO/////////////
        Nodosimple ant = cabeza;
        while (ant != null) {
            Nodosimple post = ant.getSgte();
            while (post != null) {
                if (ant.getDinero() < post.getDinero()) {
                    int temp = ant.getDinero();
                    int tempid = ant.getId();
                    String temporal = ant.getNombre();
                    ant.setDinero(post.getDinero());
                    ant.setNombre(post.getNombre());
                    ant.setId(post.getId());
                    post.setDinero(temp);
                    post.setNombre(temporal);
                    post.setId(tempid);

                }

                post = post.getSgte();

            }
            ant = ant.getSgte();

        }

    }

    public void setGanadores() {
        ///////CUENTA EL NUMERO DE JUGADORES Y LUEGO SETEA LOS 4 PRIMEROS LUGARES //////////   
        Nodosimple aux = cabeza;
        int contador = 0;

        while (aux != null) {
            contador++;
            aux = aux.getSgte();
        }
        aux = cabeza;
        ///MUESTRA EL NUMERO DE GANADORES SEGUN SU DINERO DEPENDIENDO DE LOS JUGADORES EN JUEGO////////////
        //SE HACEN VARIOS IF YA QUE NO SE PUEDE SETTEAR UN JUGADOR QUE NO EXISTE, ASI QUE LA CONDICION VALIDA LOS JUGADORES EXISTENTES
        if (contador >= 4) {
            this.primero.setText(aux.getNombre());
            this.segundo.setText(aux.getSgte().getNombre());
            this.tercero.setText(aux.getSgte().getSgte().getNombre());
            this.cuarto.setText(aux.getSgte().getSgte().getSgte().getNombre());
        }
        if (contador == 3) {
            this.primero.setText(aux.getNombre());
            this.segundo.setText(aux.getSgte().getNombre());
            this.tercero.setText(aux.getSgte().getSgte().getNombre());
        }
        if (contador == 2) {
            this.primero.setText(aux.getNombre());
            this.segundo.setText(aux.getSgte().getNombre());
        }
        if (contador == 1) {
            this.primero.setText(aux.getNombre());
        }

    }

    public void agregarAlFinal(int id, String Nombre, int dinero) {
        Nodosimple nuevo = new Nodosimple();
        nuevo.setDinero(dinero);
        nuevo.setId(id);
        nuevo.setNombre(Nombre);

        if (esVacia()) {
            cabeza = nuevo;

        } else {
            Nodosimple aux = cabeza;
            while (aux.getSgte() != null) {
                aux = aux.getSgte();
            }
            aux.setSgte(nuevo);
        }

        tam++;

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tablero().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private interfaz.PaneRuleta PanelCircular;
    private javax.swing.JButton apostar;
    private javax.swing.JTextField apuesta;
    private javax.swing.JLabel apuestan;
    private javax.swing.JLabel b1;
    private javax.swing.JLabel b2;
    private javax.swing.JLabel b3;
    private javax.swing.JLabel b4;
    private javax.swing.JButton btnGirar;
    private javax.swing.JCheckBox check1;
    private javax.swing.JCheckBox checkcolor;
    private javax.swing.JCheckBox checkdocena;
    private javax.swing.JCheckBox checklinea;
    private javax.swing.JCheckBox checkmitad;
    private javax.swing.JCheckBox checkparimpar;
    private javax.swing.JLabel color;
    private javax.swing.JComboBox<String> comboJugador;
    private javax.swing.JComboBox<String> combocolor;
    private javax.swing.JComboBox<String> combodocena;
    private javax.swing.JComboBox<String> combolinea;
    private javax.swing.JComboBox<String> combomitad;
    private javax.swing.JComboBox<String> comboparimpar;
    private javax.swing.JLabel cuadro;
    public javax.swing.JLabel cuarto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jugador;
    private javax.swing.JLabel jugador1;
    private javax.swing.JLabel linea;
    private javax.swing.JLabel linea2;
    private javax.swing.JLabel mapuesta;
    private javax.swing.JLabel mitad;
    private javax.swing.JTextField montocolor;
    private javax.swing.JTextField montodocena;
    private javax.swing.JTextField montofijo;
    private javax.swing.JTextField montolinea;
    private javax.swing.JTextField montomitad;
    private javax.swing.JTextField montoparimpar;
    public javax.swing.JLabel primero;
    private javax.swing.JButton salir;
    public javax.swing.JLabel segundo;
    private javax.swing.JLabel tablero;
    public javax.swing.JLabel tercero;
    private javax.swing.JTextField txtDineroJugador;
    // End of variables declaration//GEN-END:variables
}
